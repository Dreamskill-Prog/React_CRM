{"version":3,"sources":["components/RoundedButton.tsx","store/actions.ts","store/types.ts","components/ChatHistory.tsx","components/ChatInput.tsx","App.tsx","services/thunks.ts","serviceWorker.ts","store/reducers.ts","store/index.ts","index.tsx"],"names":["RoundedButton","props","style","backgroundColor","color","border","padding","textAlign","textDecoration","display","fontSize","margin","borderRadius","onClick","children","sendMessage","newMessage","type","payload","ChatHistory","messages","className","map","message","key","timestamp","user","ChatInput","userName","updateMessage","send","value","onChange","onKeyPress","e","placeholder","helloFunc","alert","App","state","event","setState","currentTarget","system","Date","getTime","this","updateSession","loggedIn","session","thunkSendMessage","href","target","rel","chat","React","connect","newSession","dispatch","a","Promise","resolve","asyncResp","Boolean","window","location","hostname","match","initialState","sysInitialState","rootReducer","combineReducers","action","filter","meta","store","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0cdc118.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { ColorProperty } from \"csstype\";\n\nexport interface RoundedButtonProps {\n  color: ColorProperty;\n  style?: React.CSSProperties;\n  onClick: () => void;\n  children: React.ReactNode;\n}\n\nexport function RoundedButton(props: RoundedButtonProps) {\n  return (\n    <button\n      style={{\n        backgroundColor: props.color,\n        border: \"none\",\n        color: \"white\",\n        padding: 20,\n        textAlign: \"center\",\n        textDecoration: \"none\",\n        display: \"inline-block\",\n        fontSize: \"16px\",\n        margin: \"4px 2px\",\n        borderRadius: 5\n      }}\n      onClick={() => props.onClick()}\n    >\n      {props.children}\n    </button>\n  );\n}\n","import { Message, SEND_MESSAGE, DELETE_MESSAGE, UPDATE_SESSION, SystemState\n } from './types';\n\nexport function sendMessage(newMessage: Message) {\n  return {\n    type: SEND_MESSAGE,\n    payload: newMessage\n  };\n}\n\nexport function deleteMessage(timestamp: number) {\n  return {\n    type: DELETE_MESSAGE,\n    meta: {\n      timestamp\n    }\n  };\n}\n\nexport function updateSession(newSession: SystemState) {\n  return {\n    type: UPDATE_SESSION,\n    payload: newSession\n  };\n}\n","// Describing the shape of the chat's slice of state\nexport interface Message {\n  user: string;\n  message: string;\n  timestamp: number;\n}\n\nexport interface ChatState {\n  messages: Message[];\n}\n\n// Describing the different ACTION NAMES available\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\n\ninterface SendMessageAction {\n  type: typeof SEND_MESSAGE;\n  payload: Message;\n}\n\ninterface DeleteMessageAction {\n  type: typeof DELETE_MESSAGE;\n  meta: {\n    timestamp: number;\n  };\n}\n\n// Describing the shape of the system's slice of state\nexport interface SystemState {\n  loggedIn: boolean;\n  session: string;\n  userName: string;\n}\n\n// Describing the different ACTION NAMES available\nexport const UPDATE_SESSION = 'UPDATE_SESSION';\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION;\n  payload: SystemState;\n}\n\nexport type SystemActionTypes = UpdateSessionAction;\n\nexport type ChatActionTypes = SendMessageAction | DeleteMessageAction;","import * as React from \"react\";\nimport { Message } from \"../store/types\";\n\ninterface ChatHistoryProps {\n  messages: Message[];\n}\n\nconst ChatHistory: React.FC<ChatHistoryProps> = ({ messages }) => {\n  return (\n    <div className=\"chat-history\">\n      {messages.map(message => (\n        <div className=\"message-item\" key={message.timestamp}>\n          <h3>From: {message.user}</h3>\n          <p>{message.message}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ChatHistory;\n","import * as React from \"react\";\nimport { UpdateMessageParam } from \"../App\";\n\ninterface ChatInputProps {\n  message: string;\n  userName: string;\n  sendMessage: (message: string) => void;\n  updateMessage: (event: UpdateMessageParam) => void;\n}\n\nconst ChatInput: React.FC<ChatInputProps> = ({\n  userName,\n  message,\n  updateMessage,\n  sendMessage\n}) => {\n  function keyPress(e: React.KeyboardEvent<any>) {\n    if (e.key === \"Enter\") {\n      send();\n    }\n  }\n\n  function send() {\n    sendMessage(message);\n  }\n\n  return (\n    <div className=\"chat-interface\">\n      <h3>User: {userName} </h3>\n      <input\n        value={message}\n        onChange={updateMessage}\n        onKeyPress={keyPress}\n        className=\"chat-input\"\n        placeholder=\"Type a message...\"\n      />\n      <button onClick={send}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatInput;\n","import * as React from 'react';\nimport './App.css';\nimport { RoundedButton } from './components/RoundedButton';\n\nimport { connect } from 'react-redux';\nimport { AppState } from './store';\n\nimport { SystemState, ChatState } from './store/types';\nimport { updateSession, sendMessage } from './store/actions';\n\nimport ChatHistory from './components/ChatHistory';\nimport ChatInput from './components/ChatInput';\n\nimport { thunkSendMessage } from './services/thunks';\n\nconst helloFunc = () => {\n  alert('Hello');\n};\n\n\ninterface AppProps {\n  sendMessage: typeof sendMessage;\n  updateSession: typeof updateSession;\n  chat: ChatState;\n  system: SystemState;\n  thunkSendMessage: any;\n}\n\nexport type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\n\nclass App extends React.Component<AppProps> {\n  state = {\n    message: ''\n  };\n\n  componentDidMount() {\n    this.props.updateSession({\n      loggedIn: true,\n      session: 'my_session',\n      userName: 'myName'\n    });\n    this.props.sendMessage({\n      user: 'Chat Bot',\n      message: 'This is a very basic chat application written in typescript using react and redux. Feel free to explore the source code.',\n      timestamp: new Date().getTime()\n    });\n    this.props.thunkSendMessage('This message was sent by a thunk!');\n  }\n\n  updateMessage = (event: UpdateMessageParam) => {\n    this.setState({ message: event.currentTarget.value });\n  };\n\n  sendMessage = (message: string) => {\n    this.props.sendMessage({\n      user: this.props.system.userName,\n      message: message,\n      timestamp: new Date().getTime()\n    });\n    this.setState({ message: '' });\n  };\n\n  render() {\n    return (\n      <div className=\"parent\">\n        <header className=\"App-header\">\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n\n          <a className=\"App-link\" href=\"https:reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Learn React\n          </a>\n          <RoundedButton color=\"maroon\" onClick={helloFunc}>\n            New Button\n          </RoundedButton>\n          <ChatHistory messages={this.props.chat ? this.props.chat.messages : []} />\n          <ChatInput\n            userName={this.props.system ? this.props.system.userName : ''}\n            message={this.state.message}\n            updateMessage={this.updateMessage}\n            sendMessage={this.sendMessage}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  system: state.system,\n  chat: state.chat\n});\n\nexport default connect(mapStateToProps, {\n  sendMessage,\n  updateSession,\n  thunkSendMessage\n})(App);\n\n","import { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { sendMessage } from \"../store/actions\";\nimport { AppState } from \"../store\";\n\nexport const thunkSendMessage = (\n  message: string\n): ThunkAction<void, AppState, null, Action<string>> => async dispatch => {\n  const asyncResp = await exampleAPI();\n  dispatch(\n    sendMessage({\n      message,\n      user: asyncResp,\n      timestamp: new Date().getTime()\n    })\n  );\n};\n\nfunction exampleAPI() {\n  return Promise.resolve(\"Async Chat Bot\");\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ChatState, SEND_MESSAGE, DELETE_MESSAGE, ChatActionTypes, UPDATE_SESSION, SystemState, SystemActionTypes } from './types';\n\nconst initialState: ChatState = {\n  messages: []\n};\n\nexport function chatReducer(state = initialState, action: ChatActionTypes): ChatState {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      return {\n        messages: [...state.messages, action.payload]\n      };\n    case DELETE_MESSAGE:\n      return {\n        messages: state.messages.filter(message => message.timestamp !== action.meta.timestamp)\n      };\n    default:\n      return state;\n  }\n}\n\nconst sysInitialState: SystemState = {\n  loggedIn: false,\n  session: '',\n  userName: ''\n};\n\nexport function systemReducer(state = sysInitialState, action: SystemActionTypes): SystemState {\n  switch (action.type) {\n    case UPDATE_SESSION: {\n      return {\n        ...state,\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n//   declare module 'chat' {\n//     export type Article = {\n//       id: string;\n//       title: string;\n//       content: string;\n//     };\n//   }\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { chatReducer, systemReducer } from \"./reducers\";\n\nconst rootReducer = combineReducers({\n  system: systemReducer,\n  chat: chatReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore() {\n  const middlewares = [thunkMiddleware];\n  const middleWareEnhancer = applyMiddleware(...middlewares);\n\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(middleWareEnhancer)\n  );\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}